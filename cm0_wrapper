library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library grlib;
use grlib.amba.all;
use grlib.stdlib.all;
use grlib.devices.all;
library gaisler;
use gaisler.misc.all;
library UNISIM;
use UNISIM.VComponents.all;

entity cm0_wrapper is
  port(
    clkm      : in std_logic;
    rstn      : in std_logic;
    ahbmi     : in ahb_mst_in_type;
    ahbmo     : out ahb_mst_out_type
  );
end;

architecture RTL of cm0_wrapper is
  signal HADDR    : std_logic_vector(31 downto 0);
  signal HSIZE    : std_logic_vector(2 downto 0);
  signal HTRANS   : std_logic_vector(1 downto 0);
  signal HWDATA   : std_logic_vector(31 downto 0);
  signal HWRITE   : std_logic;
  signal HREADY   : std_logic;
  signal HRDATA   : std_logic_vector (31 downto 0);
  signal HBURST   : std_logic_vector (2 downto 0);
  signal HMASTLOCK: std_logic;
  signal HPROT    : std_logic_vector (3 downto 0);
  signal LED      : std_logic;
  
 component CORTEXM0DS is
	port(
  HCLK : IN std_logic;
  HRESETn : IN std_logic;
  HADDR : OUT std_logic_vector (31 downto 0);
  HBURST : OUT std_logic_vector (2 downto 0);
  HMASTLOCK : OUT std_logic;
  HPROT : OUT std_logic_vector (3 downto 0);
  HSIZE : OUT std_logic_vector (2 downto 0);
  HTRANS : OUT std_logic_vector (1 downto 0);
  HWDATA : OUT std_logic_vector (31 downto 0);
  HWRITE : OUT std_logic;
  HRDATA : IN std_logic_vector (31 downto 0);
  HREADY : IN std_logic;
  HRESP : IN std_logic;
  NMI : IN std_logic;
  IRQ : IN std_logic_vector (15 downto 0);
  TXEV : OUT std_logic;
  RXEV : IN std_logic;
  LOCKUP : OUT std_logic;
  SYSRESETREQ : OUT std_logic;
  SLEEPING : OUT std_logic
  );
end component;

 component AHB_bridge is
  port(
    clkm : in std_logic;
    rstn : in std_logic;
    ahbmi : in ahb_mst_in_type;
    ahbmo : out ahb_mst_out_type;
    HADDR : in std_logic_vector (31 downto 0);
    HSIZE : in std_logic_vector (2 downto 0);
    HTRANS : in std_logic_vector (1 downto 0);
    HWDATA : in std_logic_vector (31 downto 0);
    HWRITE : in std_logic;
    HRDATA : out std_logic_vector (31 downto 0);
    HREADY : out std_logic
  );
 end component;
 
 begin
   
  Processor : CORTEXM0DS
  port map(
	   -- CLOCK AND RESET
    HCLK => clkm,              -- Clock
    HRESETn => rstn,           -- Asynchronous reset

    -- INPUTS
    HRDATA => HRDATA,
    HREADY => HREADY,            
  
    -- OUTPUTS
    HADDR => HADDR,        
    HSIZE => HSIZE,            
    HTRANS => HTRANS,            
    HWDATA => HWDATA,             
    HWRITE => HWRITE,            
                
    -- MISC
    HRESP => '0',
    NMI => '0',                -- Non-maskable interrupt input
    IRQ => "0000000000000000", --Interrupciones(15 downto 0),
    TXEV => OPEN,               -- Event output (SEV executed)
    RXEV => '0',               -- Event input
    LOCKUP => OPEN,             -- Core is locked-up
    SYSRESETREQ => OPEN,        -- System reset request
    SLEEPING => OPEN            -- Core and NVIC sleeping
	);
	
	Bridge : AHB_bridge
	port map(
    HADDR => HADDR,
    HSIZE => HSIZE,
    HTRANS => HTRANS,
    HWDATA => HWDATA,
    HWRITE => HWRITE,
    HRDATA => HRDATA,
    HREADY => HREADY,
    clkm => clkm,
    rstn => rstn,
    ahbmi => ahbmi,
    ahbmo => ahbmo
	);

  process (HRDATA, clkm)
  begin
	 if (falling_edge(clkm)) and (HRDATA(31 downto 0)="11110010111100101111001011110010") then
	   LED <= '1';
	 else LED <= '0';
	 end if;
  end process;

end RTL;
