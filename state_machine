library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library grlib;
use grlib.amba.all;
use grlib.stdlib.all;
use grlib.devices.all;
library gaisler;
use gaisler.misc.all;
library UNISIM;
use UNISIM.VComponents.all;

-- ENTITY FOR THE STATE MACHINE
ENTITY state_machine IS
  PORT(
    
-- clock and reset
    clkm : in std_logic;
    rstn : in std_logic;
    
-- AHB Master records --------------
    dmai : out ahb_dma_in_type;
    dmao : in ahb_dma_out_type;
    
-- ARM Cortex-M0 AHB-Lite signals -- 
    HADDR : in std_logic_vector (31 downto 0); -- AHB transaction address
    HSIZE : in std_logic_vector (2 downto 0); -- AHB size: byte, half-word or word
    HTRANS : in std_logic_vector (1 downto 0); -- AHB transfer: non-sequential only
    HWDATA : in std_logic_vector (31 downto 0); -- AHB write-data
    HWRITE : in std_logic; -- AHB write control
    HREADY : out std_logic -- AHB stall signal
    
  );
END state_machine;

-- ARCHITECTURE FOR THE STATE MACHINE
ARCHITECTURE behavioral OF state_machine IS
  
  TYPE state_type IS (IDLE, SEND_START, instr_fetch, READY_HIGH);
  SIGNAL currentState, nextState: state_type;

BEGIN
  
  --dmai signals connected directly from the CortexM0
  dmai.address <= HADDR;
  dmai.size <= HSIZE;
  dmai.wdata <= HWDATA;
  dmai.write <= HWRITE;
    
  next_state_logic: PROCESS(currentState, HTRANS, dmao.start, dmao.ready)
  BEGIN
  CASE currentState IS 
      WHEN IDLE =>        
        IF (dmao.start = '0') OR (HTRANS /= "10") OR (HTRANS /= "11") THEN
          nextState <= instr_fetch;
        ELSE
          nextState <= IDLE;
        END IF;
        
      WHEN instr_fetch =>
        IF dmao.ready = '1' AND dmao.active = '0' THEN
          nextState <= IDLE;
        ELSE
          nextState <= instr_fetch;
        END IF;
        
      WHEN OTHERS => 
        nextState <= IDLE;
    END CASE;
  END PROCESS;
  
  output_logic: PROCESS(currentState, dmao.start, HTRANS)
  BEGIN
    
    HREADY <= '0';
    dmai.start <= '0';
    
    CASE currentState IS 
         
      WHEN IDLE =>
        IF dmao.start = '1' AND (HTRANS = "10" OR HTRANS = "11") THEN dmai.start <= '1';
        ELSE dmai.start <= '0';
        END IF;
        
        IF HTRANS = "11" THEN dmai.burst <= '0';
        ELSE dmai.burst <= '0';
        END IF;
        
        IF HTRANS = "01" THEN dmai.busy <= '1';
        ELSE dmai.busy <= '0';
        END IF;
        
        HREADY <= '0';

      WHEN instr_fetch =>
        dmai.start <= '0';
        dmai.burst <= '0';
        dmai.busy <= '0';
        HREADY <= '1';
        
      WHEN OTHERS => 
        HREADY <= '0';
        dmai.start <= '0';
        dmai.busy <= '0';
        dmai.burst <= '0';
    
    END CASE;
    
    dmai.irq <= dmao.start;
  END PROCESS;

  stateReg: PROCESS(rstn,clkm)
  BEGIN
    IF rstn = '1'  THEN
      currentState <= IDLE;
    ELSIF rising_edge(clkm) THEN
      currentState <= nextState;
    END IF;
  END PROCESS;
  
END behavioral;

